{"version":3,"sources":["components/Table.jsx","context/AppContext.jsx","components/Card.jsx","routes/DriverStandings.jsx","components/TopBar.jsx","routes/ConstructorStandings.jsx","routes/Races.jsx","routes/SessionResults.jsx","routes/FastestLaps.jsx","routes/DriverResults.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","props","className","children","TableHead","TableHeader","TableBody","TableRow","TableCell","AppContext","createContext","AppProvider","useState","data","setData","useEffect","console","log","fetch","then","res","json","d","Provider","value","Card","DriverStandings","results","useContext","drivers","map","driver","key","position","to","slug","first","last","car","points","StandingsDropdown","isOpen","setIsOpen","nodeRef","useRef","onMouseEnter","onMouseLeave","onTouchEnd","e","preventDefault","activeClassName","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","onClick","ref","races","length","TopBar","isMobileMenu","setIsMobileMenu","href","ConstructurStandings","constructors","s","RaceResults","race","Fragment","winner","name","date","laps","time","SideNav","links","link","exact","session","DesktopDropDown","MobileRaceSelect","MobileSessionSelect","RaceResultsTable","abbr","pos","number","gap","FastestLapTable","lap","speed","QualifyingTable","Q1","Q2","Q3","PracticeResultsTable","SessionResults","find","match","params","sessions","component","forEach","push","path","race_results","fastest_laps","qualifying","practice1","practice2","practice3","DriverResults","raceResults","result","r","App","basename","ConstructorStandings","Races","FastestLaps","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAEO,SAASA,EAAMC,GAClB,OACI,2BAAOC,UAAW,uBAAyBD,EAAMC,WAC3CD,EAAME,UAKb,SAASC,EAAUH,GACtB,OACI,2BAAOC,UAAU,aACb,wBAAIA,UAAU,cACTD,EAAME,WAOhB,SAASE,EAAYJ,GACxB,OACI,wBAAIC,UAAW,+FAAiGD,EAAMC,WAChHD,EAAME,UAKb,SAASG,EAAUL,GACtB,OACI,2BAAOC,UAAWD,EAAMC,WAClBD,EAAME,UAKb,SAASI,EAASN,GACrB,OACI,wBAAIC,UAAW,4EAA8ED,EAAMC,WAC7FD,EAAME,UAKb,SAASK,EAAUP,GACtB,OACI,wBAAIC,UAAW,sBAAwBD,EAAMC,WACvCD,EAAME,U,WC9CPM,EAAaC,0BAEbC,EAAc,SAAC,GAAgB,IAAfR,EAAc,EAAdA,SAAc,EACfS,mBAAS,IADM,mBAChCC,EADgC,KAC1BC,EAD0B,KAGvCC,qBAAU,WAGNC,QAAQC,IAAI,eACZC,MAHY,qFAGDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACpCR,EAAQQ,QAEb,IAVoC,IAY/BC,EAAad,EAAbc,SAER,OACI,kBAACA,EAAD,CAAUC,MAAOX,GACXV,IClBC,SAASsB,EAAKxB,GACzB,OACI,yBAAKC,UAAW,mCAAqCD,EAAMC,WACtDD,EAAME,U,WCCJ,SAASuB,IACpB,IAAMC,EAAUC,qBAAWnB,GAE3B,OACI,kBAACgB,EAAD,KACI,wBAAIvB,UAAU,oCAAd,yBACA,yBAAKA,UAAU,wBACX,kBAACF,EAAD,KACI,kBAACI,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,eACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,CAAaH,UAAU,mBAAvB,WAEJ,kBAACI,EAAD,KACMqB,EAAQE,SAAWF,EAAQE,QAAQC,KAAI,SAAAC,GAAM,OAC3C,kBAACxB,EAAD,CAAUyB,IAAKD,EAAOE,UAClB,kBAACzB,EAAD,KAAYuB,EAAOE,UACnB,kBAACzB,EAAD,CAAWN,UAAU,8BACjB,kBAAC,IAAD,CAAMgC,GAAI,oBAAsBH,EAAOI,KAAMjC,UAAU,mBACvD,6BACI,0BAAMA,UAAU,aAAa6B,EAAOK,MAAQ,KAC5C,0BAAMlC,UAAU,aAAa6B,EAAOM,OAExC,yBAAKnC,UAAU,6CAA6C6B,EAAOO,OAGvE,kBAAC9B,EAAD,CAAWN,UAAU,0CAA0C6B,EAAOO,KACtE,kBAAC9B,EAAD,CAAWN,UAAU,iCAAiC6B,EAAOQ,gBC7B7F,SAASC,EAAkBvC,GAAQ,IAAD,EACFW,oBAAS,GADP,mBACvB6B,EADuB,KACfC,EADe,KAExBC,EAAUC,iBAAO,MAEjBjB,EAAUC,qBAAWnB,GAE3B,OACI,yBAAKP,UAAWD,EAAMC,UAAW2C,aAAc,kBAAMH,GAAU,IAAOI,aAAc,kBAAMJ,GAAU,KAChG,yBAAKxC,UAAU,qBACX,kBAAC,IAAD,CAASgC,GAAG,WAAWa,WAAY,SAACC,GAAON,GAAWD,GAASO,EAAEC,kBAAmBC,gBAAgB,yBAAyBhD,UAAU,uKAAvI,UAEI,yBAAKA,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,sBAU/EmB,GACE,yBAAKiB,QAAS,WAAQhB,GAAU,IAAUiB,IAAKhB,EAASzC,UAAU,0FAC9D,kBAAC,IAAD,CAASgC,GAAG,mBAAmBhC,UAAU,6EAAzC,WACA,kBAAC,IAAD,CAASgC,GAAG,wBAAwBhC,UAAU,6EAA9C,gBACA,kBAAC,IAAD,CAASgC,GAAG,iBAAiBhC,UAAU,6EAAvC,SACA,kBAAC,IAAD,CAASgC,GAAG,sBAAsBhC,UAAU,6EAA5C,gBACCyB,EAAQiC,OACL,kBAAC,IAAD,CAAS1B,GAAI,kBAAoBP,EAAQiC,MAAMjC,EAAQiC,MAAMC,OAAS,GAAG1B,KAAMjC,UAAU,6EAAzF,YAST,SAAS4D,EAAO7D,GAC3B,IAAM0B,EAAUC,qBAAWnB,GADO,EAGMG,oBAAS,GAHf,mBAG3BmD,EAH2B,KAGbC,EAHa,KAKlC,OACI,yBAAK9D,UAAW,UAAYD,EAAMC,WAC9B,yBAAKA,UAAU,iEACX,kBAAC,IAAD,CAASgC,GAAG,WAAWhC,UAAU,aAAa+D,KAAK,KAC/C,yBAAK/D,UAAU,iBAAiBmD,QAAQ,eAAeD,KAAK,OAAOD,MAAM,8BACrE,0BAAM7B,EAAE,yHAAyH8B,KAAK,iBACtI,0BAAM9B,EAAE,2qBAA2qB8B,KAAK,iBACxrB,0BAAM9B,EAAE,yCAAyC8B,KAAK,mBAM9D,yBAAKlD,UAAU,4BACX,kBAACsC,EAAD,CAAmBtC,UAAU,qBAQjC,yBAAKA,UAAU,qBACX,4BAAQwD,QAAS,kBAAMM,GAAiBD,IAAe7D,UAAU,sBAC7D,yBAAKA,UAAU,qBAAqBiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBAC1G,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,gCAKnFyC,GAAgB,yBAAKL,QAAS,kBAAMM,GAAgB,IAAQ9D,UAAU,mCACpE,kBAAC,IAAD,CAASgC,GAAG,mBAAmBhC,UAAU,6EAAzC,WACA,kBAAC,IAAD,CAASgC,GAAG,wBAAwBhC,UAAU,6EAA9C,gBACA,kBAAC,IAAD,CAASgC,GAAG,iBAAiBhC,UAAU,6EAAvC,SACA,kBAAC,IAAD,CAASgC,GAAG,sBAAsBhC,UAAU,6EAA5C,gBACCyB,EAAQiC,OACD,kBAAC,IAAD,CAAS1B,GAAI,kBAAoBP,EAAQiC,MAAMjC,EAAQiC,MAAMC,OAAS,GAAG1B,KAAMjC,UAAU,6EAAzF,Y,WC/ET,SAASgE,IACpB,IAAMvC,EAAUC,qBAAWnB,GAE3B,OACI,kBAACgB,EAAD,KACI,wBAAIvB,UAAU,oCAAd,8BACA,yBAAKA,UAAU,wBACX,kBAACF,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,aACA,kBAACA,EAAD,CAAaH,UAAU,mBAAvB,WAEJ,kBAACI,EAAD,KACKqB,EAAQwC,cAAgBxC,EAAQwC,aAAarC,KAAI,SAAAsC,GAAC,OAC/C,kBAAC7D,EAAD,CAAUyB,IAAKoC,EAAEnC,UACb,kBAACzB,EAAD,KACK4D,EAAEnC,UAEP,kBAACzB,EAAD,CAAWN,UAAU,qBAChBkE,EAAE9B,KAEP,kBAAC9B,EAAD,CAAWN,UAAU,iCAChBkE,EAAE7B,gBCtBxB,SAAS8B,IACpB,IAAMxD,EAAOe,qBAAWnB,GAExB,OACI,kBAACgB,EAAD,KACI,wBAAIvB,UAAU,oCAAd,qBACA,yBAAKA,UAAU,wBACX,kBAACF,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,CAAaH,UAAU,IAAvB,cACA,kBAACG,EAAD,CAAaH,UAAU,wBAAvB,QACA,kBAACG,EAAD,CAAaH,UAAU,IAAvB,UACA,kBAACG,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,CAAaH,UAAU,wBAAvB,QACA,kBAACG,EAAD,CAAaH,UAAU,wBAAvB,SAEJ,kBAACI,EAAD,KACKO,EAAK+C,OAAS/C,EAAK+C,MAAM9B,KAAI,SAAAwC,GAAI,OAC9B,kBAAC,IAAMC,SAAP,CAAgBvC,IAAKsC,EAAKnC,MACrBmC,EAAKE,QAAU,kBAACjE,EAAD,CAAUyB,IAAKsC,EAAKG,MAChC,kBAACjE,EAAD,CAAWN,UAAU,IACjB,kBAAC,IAAD,CAAMgC,GAAI,kBAAoBoC,EAAKnC,KAAMjC,UAAU,mBAAmBoE,EAAKG,OAE/E,kBAACjE,EAAD,CAAWN,UAAU,wBAAwBoE,EAAKI,MAClD,kBAAClE,EAAD,CAAWN,UAAU,iBACjB,6BACI,0BAAMA,UAAU,aAAaoE,EAAKE,OAAOpC,MAAQ,KACjD,0BAAMlC,UAAU,aAAaoE,EAAKE,OAAOnC,OAE7C,yBAAKnC,UAAU,6CAA6CoE,EAAKhC,MAErE,kBAAC9B,EAAD,CAAWN,UAAU,0CAA0CoE,EAAKhC,KACpE,kBAAC9B,EAAD,CAAWN,UAAU,wBAAwBoE,EAAKK,MAClD,kBAACnE,EAAD,CAAWN,UAAU,wBAAwBoE,EAAKM,eCjCtF,SAASC,EAAQ5E,GACb,OACI,yBAAKC,UAAWD,EAAMC,WAClB,wBAAIA,UAAU,2BACTD,EAAM6E,MAAMhD,KAAI,SAAAiD,GAAI,OACjB,wBAAI/C,IAAK+C,EAAKd,MACV,kBAAC,IAAD,CAASe,OAAK,EAAC9C,GAAI,kBAAoBjC,EAAMkC,KAAO4C,EAAKd,KAAMf,gBAAgB,8BAA8BhD,UAAU,gCAAgC6E,EAAKE,eAQpL,SAASC,EAAgBjF,GAAQ,IAAD,EACAW,oBAAS,GADT,mBACrB6B,EADqB,KACbC,EADa,KAG5B,OACI,yBAAKxC,UAAWD,EAAMC,WAClB,4BAAQwD,QAAS,kBAAMhB,GAAWD,IAASvC,UAAU,gJACjD,qCACA,6BACKuC,EACG,yBAAKvC,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,mBAEzE,yBAAKpB,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,sBAMnFmB,GACE,4BAAQiB,QAAS,kBAAMhB,GAAU,IAAQxC,UAAU,qFAGrDuC,GAAU,yBAAKiB,QAAS,WAAQhB,GAAU,IAAUxC,UAAU,oFAC3DD,EAAM2D,MAAM9B,KAAI,SAAAwC,GAAI,OACjB,kBAAC,IAAD,CAAStC,IAAKsC,EAAKnC,KAAMD,GAAI,kBAAoBoC,EAAKnC,KAAMjC,UAAU,6EAA6EoE,EAAKG,WAO5K,SAASU,EAAiBlF,GAAQ,IAAD,EACDW,oBAAS,GADR,mBACtB6B,EADsB,KACdC,EADc,KAG7B,OACI,yBAAKxC,UAAWD,EAAMC,WAClB,yBAAKA,UAAU,qBACX,4BAAQwD,QAAS,kBAAMhB,GAAWD,IAASP,GAAG,WAAWhC,UAAU,kIAC/D,qCACA,6BACKuC,EACG,yBAAKvC,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,mBAEzE,yBAAKpB,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,uBAMxFmB,GACG,yBAAKiB,QAAS,kBAAMhB,GAAU,IAAQxC,UAAU,mCAC3CD,EAAM2D,MAAM9B,KAAI,SAAAwC,GAAI,OACjB,kBAAC,IAAD,CAAStC,IAAKsC,EAAKnC,KAAMD,GAAI,kBAAoBoC,EAAKnC,KAAMjC,UAAU,6EAA6EoE,EAAKG,WAQhL,SAASW,EAAoBnF,GAAQ,IAAD,EACJW,oBAAS,GADL,mBACzB6B,EADyB,KACjBC,EADiB,KAGhC,OACI,yBAAKxC,UAAWD,EAAMC,WAClB,yBAAKA,UAAU,qBACX,4BAAQwD,QAAS,kBAAMhB,GAAWD,IAASP,GAAG,WAAWhC,UAAU,kIAC/D,wCACA,6BACKuC,EACG,yBAAKvC,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,mBAEzE,yBAAKpB,UAAU,eAAeiD,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,gBACpG,0BAAMC,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGnC,EAAE,uBAMxFmB,GACG,yBAAKiB,QAAS,kBAAMhB,GAAU,IAAQxC,UAAU,mCAC3CD,EAAM6E,MAAMhD,KAAI,SAAAiD,GAAI,OACjB,kBAAC,IAAD,CAAS/C,IAAK+C,EAAKd,KAAM/B,GAAI,kBAAoBjC,EAAMkC,KAAO4C,EAAKd,KAAM/D,UAAU,6EAA6E6E,EAAKE,cAQ7L,SAASI,EAAiBpF,GACtB,OACI,yBAAKC,UAAW,UAAYD,EAAMC,WAC9B,wBAAIA,UAAU,oCAAoC,QAAUD,EAAMwE,KAAO,mBACzE,kBAACzE,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,MACA,kBAACG,EAAD,eACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,aACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,gBACA,kBAACG,EAAD,CAAaH,UAAU,mBAAvB,QAEJ,kBAACI,EAAD,KACKL,EAAM0B,SAAW1B,EAAM0B,QAAQG,KAAI,SAAAsC,GAAC,OACjC,kBAAC7D,EAAD,CAAUyB,IAAKoC,EAAErC,OAAOuD,MACpB,kBAAC9E,EAAD,KAAY4D,EAAEmB,KACd,kBAAC/E,EAAD,CAAWN,UAAU,wBAAwBkE,EAAErC,OAAOyD,QACtD,kBAAChF,EAAD,CAAWN,UAAU,iBACjB,0BAAMA,UAAU,oBAAoBkE,EAAErC,OAAOK,MAAQ,KACrD,0BAAMlC,UAAU,oBAAoBkE,EAAErC,OAAOM,MAC7C,0BAAMnC,UAAU,aAAakE,EAAErC,OAAOuD,OAE1C,kBAAC9E,EAAD,CAAWN,UAAU,0CAA0CkE,EAAE9B,KACjE,kBAAC9B,EAAD,KAAY4D,EAAEO,MACd,kBAACnE,EAAD,CAAWN,UAAU,wBAAwBkE,EAAEqB,KAC/C,kBAACjF,EAAD,CAAWN,UAAU,mBAAmBkE,EAAE7B,eAStE,SAASmD,EAAgBzF,GACrB,OACI,yBAAKC,UAAW,UAAYD,EAAMC,WAC9B,wBAAIA,UAAU,oCAAoC,QAAUD,EAAMwE,KAAO,mBACzE,kBAACzE,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,MACA,kBAACG,EAAD,eACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,YACA,kBAACA,EAAD,aACA,kBAACA,EAAD,CAAaH,UAAU,wCAAvB,cAEJ,kBAACI,EAAD,KACKL,EAAM0E,MAAQ1E,EAAM0E,KAAK7C,KAAI,SAAAsC,GAAC,OAC3B,kBAAC7D,EAAD,CAAUyB,IAAKoC,EAAErC,OAAOuD,MACpB,kBAAC9E,EAAD,KAAY4D,EAAEmB,KACd,kBAAC/E,EAAD,CAAWN,UAAU,wBAAwBkE,EAAErC,OAAOyD,QACtD,kBAAChF,EAAD,CAAWN,UAAU,iBACjB,0BAAMA,UAAU,oBAAoBkE,EAAErC,OAAOK,MAAQ,KACrD,0BAAMlC,UAAU,oBAAoBkE,EAAErC,OAAOM,MAC7C,0BAAMnC,UAAU,aAAakE,EAAErC,OAAOuD,OAE1C,kBAAC9E,EAAD,CAAWN,UAAU,0CAA0CkE,EAAE9B,KACjE,kBAAC9B,EAAD,KAAY4D,EAAEuB,KACd,kBAACnF,EAAD,KAAY4D,EAAEQ,MACd,kBAACpE,EAAD,CAAWN,UAAU,wCAAwCkE,EAAEwB,cAS3F,SAASC,EAAgB5F,GACrB,OACI,yBAAKC,UAAW,UAAYD,EAAMC,WAC9B,wBAAIA,UAAU,oCAAoC,QAAUD,EAAMwE,KAAO,iBACzE,kBAACzE,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,MACA,kBAACG,EAAD,eACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,WACA,kBAACA,EAAD,WACA,kBAACA,EAAD,WACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,SAEJ,kBAACI,EAAD,KACKL,EAAM0E,MAAQ1E,EAAM0E,KAAK7C,KAAI,SAAAsC,GAAC,OAC3B,kBAAC7D,EAAD,CAAUyB,IAAKoC,EAAErC,OAAOuD,MACpB,kBAAC9E,EAAD,KAAY4D,EAAEmB,KACd,kBAAC/E,EAAD,CAAWN,UAAU,wBAAwBkE,EAAErC,OAAOyD,QACtD,kBAAChF,EAAD,CAAWN,UAAU,iBACjB,0BAAMA,UAAU,oBAAoBkE,EAAErC,OAAOK,MAAQ,KACrD,0BAAMlC,UAAU,oBAAoBkE,EAAErC,OAAOM,MAC7C,0BAAMnC,UAAU,aAAakE,EAAErC,OAAOuD,OAE1C,kBAAC9E,EAAD,CAAWN,UAAU,0CAA0CkE,EAAE9B,KACjE,kBAAC9B,EAAD,KAAY4D,EAAE0B,IACd,kBAACtF,EAAD,KAAY4D,EAAE2B,IACd,kBAACvF,EAAD,KAAY4D,EAAE4B,IACd,kBAACxF,EAAD,CAAWN,UAAU,wBAAwBkE,EAAEO,aAS3E,SAASsB,EAAqBhG,GAC1B,OACI,yBAAKC,UAAW,UAAYD,EAAMC,WAC9B,wBAAIA,UAAU,oCAAoC,QAAUD,EAAMwE,KAAO,MAAQxE,EAAMgF,SACvF,kBAACjF,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,YACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,MACA,kBAACG,EAAD,eACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,CAAaH,UAAU,IAAvB,QACA,kBAACG,EAAD,CAAaH,UAAU,wBAAvB,SAEJ,kBAACI,EAAD,KACKL,EAAM0B,SAAW1B,EAAM0B,QAAQG,KAAI,SAAAsC,GAAC,OACjC,kBAAC7D,EAAD,CAAUyB,IAAKoC,EAAErC,OAAOuD,MACpB,kBAAC9E,EAAD,KAAY4D,EAAEmB,KACd,kBAAC/E,EAAD,CAAWN,UAAU,wBAAwBkE,EAAErC,OAAOyD,QACtD,kBAAChF,EAAD,CAAWN,UAAU,iBACjB,0BAAMA,UAAU,oBAAoBkE,EAAErC,OAAOK,MAAQ,KACrD,0BAAMlC,UAAU,oBAAoBkE,EAAErC,OAAOM,MAC7C,0BAAMnC,UAAU,aAAakE,EAAErC,OAAOuD,OAE1C,kBAAC9E,EAAD,CAAWN,UAAU,0CAA0CkE,EAAE9B,KACjE,kBAAC9B,EAAD,KAAY4D,EAAEQ,MACd,kBAACpE,EAAD,CAAWN,UAAU,wBAAwBkE,EAAEO,aAS5D,SAASuB,EAAejG,GACnC,IAAM0B,EAAUC,qBAAWnB,GACrB6D,EAAO3C,EAAQiC,MAAQjC,EAAQiC,MAAMuC,MAAK,SAAA7B,GAAI,OAAIA,EAAKnC,OAASlC,EAAMmG,MAAMC,OAAOlE,QAAQ,KAE3F2C,EAAQ,GACRwB,EAAW,CACb,CAAEtE,IAAK,eAAgBiD,QAAS,eAAgBhB,KAAM,eAAgBsC,UAAWlB,GACjF,CAAErD,IAAK,eAAgBiD,QAAS,eAAgBhB,KAAM,eAAgBsC,UAAWb,GACjF,CAAE1D,IAAK,aAAciD,QAAS,aAAchB,KAAM,cAAesC,UAAWV,GAC5E,CAAE7D,IAAK,YAAaiD,QAAS,aAAchB,KAAM,aAAcsC,UAAWN,GAC1E,CAAEjE,IAAK,YAAaiD,QAAS,aAAchB,KAAM,aAAcsC,UAAWN,GAC1E,CAAEjE,IAAK,YAAaiD,QAAS,aAAchB,KAAM,aAAcsC,UAAWN,IAgB9E,OAdI3B,GACIA,EAAK3C,SACL2E,EAASE,SAAQ,SAAApC,GACTA,EAAEpC,OAAOsC,EAAK3C,SACdmD,EAAM2B,KAAK,CACPxB,QAASb,EAAEa,QACXhB,KAAMG,EAAEH,KACRsC,UAAWnC,EAAEmC,eAQ7B,kBAAC9E,EAAD,CAAMvB,UAAU,wBACXoE,GAAQ,yBAAKpE,UAAU,kBACpB,kBAACiF,EAAD,CAAkBvB,MAAOjC,EAAQiC,QACjC,kBAACwB,EAAD,CAAqBlF,UAAU,OAAOiC,KAAMmC,EAAKnC,KAAM2C,MAAOA,KAEjER,GAAQ,yBAAKpE,UAAU,8BACpB,yBAAKA,UAAU,SACX,kBAACgF,EAAD,CAAiBhF,UAAU,GAAG0D,MAAOjC,EAAQiC,QAC7C,kBAACiB,EAAD,CAAS3E,UAAU,OAAOiC,KAAMmC,EAAKnC,KAAM2C,MAAOA,MAGzDR,GAAQ,yBAAKpE,UAAU,eACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8E,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,MACtCmC,GAAQ,kBAAC,IAAD,CAAUpC,GAAI,kBAAoBoC,EAAKnC,KAAO2C,EAAM,GAAGb,QAErE,kBAAC,IAAD,CAAOe,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,gBAC/C,kBAACkD,EAAD,CAAkBZ,KAAMH,EAAKG,KAAM9C,QAAS2C,EAAK3C,QAAQgF,gBAE7D,kBAAC,IAAD,CAAO3B,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,gBAC/C,kBAACuD,EAAD,CAAiBjB,KAAMH,EAAKG,KAAME,KAAML,EAAK3C,QAAQiF,gBAEzD,kBAAC,IAAD,CAAO5B,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,eAC/C,kBAAC0D,EAAD,CAAiBpB,KAAMH,EAAKG,KAAME,KAAML,EAAK3C,QAAQkF,cAEzD,kBAAC,IAAD,CAAO7B,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,cAC/C,kBAAC8D,EAAD,CAAsBxB,KAAMH,EAAKG,KAAMQ,QAAS,aAActD,QAAS2C,EAAK3C,QAAQmF,aAExF,kBAAC,IAAD,CAAO9B,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,cAC/C,kBAAC8D,EAAD,CAAsBxB,KAAMH,EAAKG,KAAMQ,QAAS,aAActD,QAAS2C,EAAK3C,QAAQoF,aAExF,kBAAC,IAAD,CAAO/B,OAAK,EAAC0B,KAAM,kBAAoBpC,EAAKnC,KAAO,cAC/C,kBAAC8D,EAAD,CAAsBxB,KAAMH,EAAKG,KAAMQ,QAAS,aAActD,QAAS2C,EAAK3C,QAAQqF,gBCxT7F,SAAStF,IACpB,IAAMb,EAAOe,qBAAWnB,GAExB,OACI,kBAACgB,EAAD,KACI,wBAAIvB,UAAU,oCAAd,qBACA,yBAAKA,UAAU,wBACX,kBAACF,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,mBACA,kBAACA,EAAD,eACA,kBAACA,EAAD,YACA,kBAACA,EAAD,aACA,kBAACA,EAAD,mBAEJ,kBAACC,EAAD,KACKO,EAAK+C,OAAS/C,EAAK+C,MAAM9B,KAAI,SAAAwC,GAAI,OAC9B,kBAAC,IAAMC,SAAP,CAAgBvC,IAAKsC,EAAKnC,MACrBmC,EAAK3C,QAAQiF,cAAgB,kBAACrG,EAAD,CAAUyB,IAAKsC,EAAKG,MAC9C,kBAACjE,EAAD,KACI,kBAAC,IAAD,CAAM0B,GAAI,kBAAoBoC,EAAKnC,KAAMjC,UAAU,mBAAmBoE,EAAKG,OAE/E,kBAACjE,EAAD,CAAWN,UAAU,iBACjB,0BAAMA,UAAU,oBAAoBoE,EAAK3C,QAAQiF,aAAa,GAAG7E,OAAOK,MAAQ,KAChF,0BAAMlC,UAAU,oBAAoBoE,EAAK3C,QAAQiF,aAAa,GAAG7E,OAAOM,MACxE,0BAAMnC,UAAU,aAAaoE,EAAK3C,QAAQiF,aAAa,GAAG7E,OAAOuD,OAErE,kBAAC9E,EAAD,CAAWN,UAAU,qBAAqBoE,EAAK3C,QAAQiF,aAAa,GAAGtE,KACvE,kBAAC9B,EAAD,KAAY8D,EAAK3C,QAAQiF,aAAa,GAAGhC,MACzC,kBAACpE,EAAD,KAAY8D,EAAK3C,QAAQiF,aAAa,GAAGhB,gBC7B9D,SAASqB,EAAchH,GAClC,IAAM0B,EAAUC,qBAAWnB,GACrBsB,EAASJ,EAAQE,QAAUF,EAAQE,QAAQsE,MAAK,SAAApE,GAAM,OAAIA,EAAOI,OAASlC,EAAMmG,MAAMC,OAAOlE,QAAQ,KAErG+E,EAAc,GAmBpB,OAlBIvF,EAAQiC,OACRjC,EAAQiC,MAAM4C,SAAQ,SAAAlC,GAClB,GAAIA,EAAK3C,QAAQgF,aAAc,CAC3B,IAAMQ,EAAS7C,EAAK3C,QAAQgF,aAAaR,MAAK,SAAAiB,GAAC,OAAIA,EAAErF,OAAOyD,SAAWzD,EAAOyD,UAC1E2B,GACAD,EAAYT,KAAK,CACbhC,KAAMH,EAAKG,KACXC,KAAMJ,EAAKI,KACXvC,KAAMmC,EAAKnC,KACXJ,OAAQA,EACRQ,OAAQ4E,EAAO5E,OACfgD,IAAK4B,EAAO5B,UAOjB,OAAXxD,EACQ,yCAIR,kBAACN,EAAD,KACI,wBAAIvB,UAAU,oCAAoC6B,EAAOK,MAAQ,IAAML,EAAOM,MAC9E,yBAAKnC,UAAU,wBACX,kBAACF,EAAD,CAAOE,UAAU,QACb,kBAACE,EAAD,KACI,kBAACC,EAAD,mBACA,kBAACA,EAAD,aACA,kBAACA,EAAD,CAAaH,UAAU,wBAAvB,OACA,kBAACG,EAAD,sBACA,kBAACA,EAAD,CAAaH,UAAU,mBAAvB,QAEJ,kBAACI,EAAD,KACK4G,EAAYpF,KAAI,SAAAsF,GAAC,OACd,kBAAC7G,EAAD,CAAUyB,IAAKoF,EAAE3C,MACb,kBAACjE,EAAD,CAAWN,UAAU,iBACjB,kBAAC,IAAD,CAAMgC,GAAI,kBAAoBkF,EAAEjF,KAAMjC,UAAU,mBAAmBkH,EAAE3C,OAEzE,kBAACjE,EAAD,KAAY4G,EAAE1C,MACd,kBAAClE,EAAD,CAAWN,UAAU,0CAA0CkH,EAAErF,OAAOO,KACxE,kBAAC9B,EAAD,CAAWN,UAAU,iBAAiBkH,EAAE7B,KACxC,kBAAC/E,EAAD,CAAWN,UAAU,iCAAiCkH,EAAE7E,gBCnBzE8E,MAxBf,WACI,OACI,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,yBAAKpH,UAAU,kDACX,kBAAC4D,EAAD,CAAQ5D,UAAU,gBAClB,yBAAKA,UAAU,sBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8E,OAAK,EAAC0B,KAAK,IAAIH,UAAW7E,IACjC,kBAAC,IAAD,CAAOsD,OAAK,EAAC0B,KAAK,WAAWH,UAAW7E,IACxC,kBAAC,IAAD,CAAOsD,OAAK,EAAC0B,KAAK,mBAAmBH,UAAW7E,IAChD,kBAAC,IAAD,CAAOgF,KAAK,wBAAwBH,UAAWgB,IAC/C,kBAAC,IAAD,CAAOvC,OAAK,EAAC0B,KAAK,iBAAiBH,UAAWiB,IAC9C,kBAAC,IAAD,CAAOd,KAAK,uBAAuBH,UAAWL,IAC9C,kBAAC,IAAD,CAAOlB,OAAK,EAAC0B,KAAK,sBAAsBH,UAAWkB,IACnD,kBAAC,IAAD,CAAOf,KAAK,yBAAyBH,UAAWU,UCdxDS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlH,MAAK,SAAAmH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzH,QAAQyH,MAAMA,EAAMC,c","file":"static/js/main.a1edb34f.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Table(props) {\n    return (\n        <table className={'w-full rounded-t-lg ' + props.className}>\n            { props.children}\n        </table>\n    )\n}\n\nexport function TableHead(props) {\n    return (\n        <thead className=\"text-left\">\n            <tr className=\"header-row\">\n                {props.children}\n            </tr>\n        </thead>\n    )\n}\n\n// rounded-tl-lg \nexport function TableHeader(props) {\n    return (\n        <th className={'pl-4 py-2 bg-gray-100 uppercase border-b tracking-wider font-semibold text-xs text-gray-600 ' + props.className}>\n            { props.children}\n        </th>\n    )\n}\n\nexport function TableBody(props) {\n    return (\n        <tbody className={props.className}>\n            { props.children}\n        </tbody>\n    )\n}\n\nexport function TableRow(props) {\n    return (\n        <tr className={'bg-white text-left text-gray-600 hover:bg-gray-100 font-semibold text-sm ' + props.className}>\n            { props.children}\n        </tr>\n    )\n}\n\nexport function TableCell(props) {\n    return (\n        <td className={'pl-4 py-3 border-b ' + props.className}>\n            { props.children}\n        </td>\n    )\n}","import React, { createContext, useEffect, useState } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({children}) => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const url = 'https://raw.githubusercontent.com/Anden100/formula1point5/master/public/2020.json';\n        // const url = '/formula1point5/2020.json';\n        console.log('Fetching...');\n        fetch(url).then(res => res.json()).then(d => {\n            setData(d);\n        });\n    }, []);\n\n    const { Provider } = AppContext;\n\n    return (\n        <Provider value={data}>\n            { children }\n        </Provider>\n    )\n}","import React from 'react';\n\nexport default function Card(props) {\n    return (\n        <div className={'py-3 bg-white rounded-md shadow ' + props.className}>\n            {props.children}\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\nimport Card from '../components/Card';\nimport { Link } from 'react-router-dom';\n\nexport default function DriverStandings() {\n    const results = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Driver Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table>\n                    <TableHead>\n                        <TableHeader>Pos</TableHeader>\n                        <TableHeader>Driver</TableHeader>\n                        <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                        <TableHeader className=\"text-right pr-4\">Points</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        { results.drivers && results.drivers.map(driver => (\n                            <TableRow key={driver.position}>\n                                <TableCell>{driver.position}</TableCell>\n                                <TableCell className=\"text-gray-700 leading-snug\">\n                                    <Link to={'/results/drivers/' + driver.slug} className=\"hover:underline\">\n                                    <div>\n                                        <span className=\"lg:inline\">{driver.first + ' '}</span>\n                                        <span className=\"sm:inline\">{driver.last}</span>\n                                    </div>\n                                    <div className=\"sm:hidden text-gray-600 text-xs uppercase\">{driver.car}</div>\n                                    </Link>\n                                </TableCell>\n                                <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{driver.car}</TableCell>\n                                <TableCell className=\"pr-4 text-right text-gray-700\">{driver.points}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext, useRef, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport { AppContext } from '../context/AppContext';\n\nfunction StandingsDropdown(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    const nodeRef = useRef(null);\n\n    const results = useContext(AppContext);\n\n    return (\n        <div className={props.className} onMouseEnter={() => setIsOpen(true)} onMouseLeave={() => setIsOpen(false)}>\n            <div className=\"flex items-center\">\n                <NavLink to=\"/results\" onTouchEnd={(e) => {setIsOpen(!isOpen); e.preventDefault()}} activeClassName='border-white-important' className=\"flex items-baseline block px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\">\n                    Results\n                    <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                </NavLink>\n            </div>\n            {/* <CSSTransition\n                in={isOpen}\n                nodeRef={nodeRef}\n                timeout={200}\n                classNames='flyout'\n            > */}\n            { isOpen &&\n                <div onClick={() => { setIsOpen(false) }} ref={nodeRef} className=\"absolute py-2 -mt-2 w-48 text-sm bg-white rounded-md shadow-lg transition duration-500\">\n                    <NavLink to=\"/results/drivers\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                    <NavLink to=\"/results/constructors\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                    <NavLink to=\"/results/races\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                    <NavLink to=\"/results/fastestlap\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                    {results.races &&\n                        <NavLink to={'/results/races/' + results.races[results.races.length - 1].slug} className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n                </div>\n            }\n            {/* </CSSTransition> */}\n        </div>\n    )\n}\n\nexport default function TopBar(props) {\n    const results = useContext(AppContext);\n\n    const [isMobileMenu, setIsMobileMenu] = useState(false);\n\n    return (\n        <div className={'w-full ' + props.className}>\n            <div className=\"w-full bg-red-700 flex items-center shadow-md justify-between\">\n                <NavLink to=\"/results\" className=\"ml-5 mr-10\" href=\"#\">\n                    <svg className=\"h-5 text-white\" viewBox=\"0 0 1070 191\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M247 0c-30.928 0-73.729 17.729-95.598 39.598L0 191h107l91.009-91.009C214.02 83.98 245.356 71 268 71h290.145l71-71H247z\" fill=\"currentColor\" />\n                        <path d=\"M266.11 83c-17.673 0-42.136 10.126-54.639 22.616L126 191h101.103l29.309-29.279c7.033-7.025 20.793-12.721 30.734-12.721h192.787L546 83H266.11zM644 0h119.771l-190 190H454L644 0zM660.376 114.6h100.587c56.569 0 100.951.728 101.497 1.637.545.91-.364 2.729-2.001 4.002-2.365 2.001-22.191 2.729-106.044 3.092l-102.952.364L630 145.524h37.106l37.288.182-23.646 22.556L657.102 191l110.046-.546c109.863-.364 110.045-.364 120.231-4.547 16.007-6.367 30.74-16.736 48.566-34.198 16.734-16.736 22.191-24.921 26.01-39.656 2.911-11.642-1.273-22.92-10.731-28.74-6.73-4.184-7.458-4.184-76.214-4.73-38.379-.364-71.01.91-71.01 0 0-.728 5-5.083 6.529-7.276l3.971-4.002h188.2L1070 0H776.06L660.376 114.6z\" fill=\"currentColor\" />\n                        <path d=\"M585 191h61.38L684 153h-61.38L585 191z\" fill=\"currentColor\" />\n                    </svg>\n                </NavLink>\n                {/* <NavLink to='/calendar' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Calendar\n            </NavLink> */}\n                <div className=\"flex flex-1 items-center\">\n                    <StandingsDropdown className=\"hidden sm:block\" />\n                </div>\n                {/* <NavLink to='/teams' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Teams\n            </NavLink>\n            <NavLink to='/drivers' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Drivers\n            </NavLink> */}\n                <div className=\"flex items-center\">\n                    <button onClick={() => setIsMobileMenu(!isMobileMenu)} className=\"sm:hidden p-3 mr-2\">\n                        <svg className=\"text-white h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            { isMobileMenu && <div onClick={() => setIsMobileMenu(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                <NavLink to=\"/results/drivers\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                <NavLink to=\"/results/constructors\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                <NavLink to=\"/results/races\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                <NavLink to=\"/results/fastestlap\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                {results.races &&\n                        <NavLink to={'/results/races/' + results.races[results.races.length - 1].slug} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n            </div>}\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport Card from '../components/Card';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\n\nexport default function ConstructurStandings() {\n    const results = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Constructor Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Pos</TableHeader>\n                        <TableHeader>Team</TableHeader>\n                        <TableHeader className='text-right pr-4'>Points</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {results.constructors && results.constructors.map(s => (\n                            <TableRow key={s.position}>\n                                <TableCell>\n                                    {s.position}\n                                </TableCell>\n                                <TableCell className=\"text-xs uppercase\">\n                                    {s.car}\n                                </TableCell>\n                                <TableCell className=\"text-right text-gray-700 pr-4\">\n                                    {s.points}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHeader, TableHead, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function RaceResults() {\n    const data = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Race Results</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader className=\"\">Grand Prix</TableHeader>\n                        <TableHeader className=\"hidden md:table-cell\">Date</TableHeader>\n                        <TableHeader className=\"\">Winner</TableHeader>\n                        <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                        <TableHeader className=\"hidden xs:table-cell\">Laps</TableHeader>\n                        <TableHeader className=\"hidden lg:table-cell\">Time</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {data.races && data.races.map(race => (\n                            <React.Fragment key={race.slug}>\n                                {race.winner && <TableRow key={race.name}>\n                                    <TableCell className=\"\">\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"hidden md:table-cell\">{race.date}</TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <div>\n                                            <span className=\"lg:inline\">{race.winner.first + ' '}</span>\n                                            <span className=\"sm:inline\">{race.winner.last}</span>\n                                        </div>\n                                        <div className=\"sm:hidden text-gray-600 text-xs uppercase\">{race.car}</div>\n                                    </TableCell>\n                                    <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{race.car}</TableCell>\n                                    <TableCell className=\"hidden xs:table-cell\">{race.laps}</TableCell>\n                                    <TableCell className=\"hidden lg:table-cell\">{race.time}</TableCell>\n                                </TableRow>}\n                            </React.Fragment>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { NavLink, Redirect, Route, Switch } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nfunction SideNav(props) {\n    return (\n        <div className={props.className}>\n            <ul className=\"text-gray-700 space-y-2\">\n                {props.links.map(link => (\n                    <li key={link.href}>\n                        <NavLink exact to={'/results/races/' + props.slug + link.href} activeClassName=\"font-semibold text-gray-900\" className=\"w-full block hover:underline\">{link.session}</NavLink>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nfunction DesktopDropDown(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <button onClick={() => setIsOpen(!isOpen)} className=\"relative z-10 flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                <div>Race</div>\n                <div>\n                    {isOpen ?\n                        <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                        </svg> :\n                        <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    }\n                </div>\n            </button>\n\n            { isOpen &&\n                <button onClick={() => setIsOpen(false)} className=\"fixed top-0 top-0 right-0 bottom-0 left-0 h-full w-full opacity-0 cursor-default\"></button>\n            }\n\n            { isOpen && <div onClick={() => { setIsOpen(false) }} className=\"absolute py-2 w-48 text-sm bg-white rounded-md shadow-lg transition duration-500\">\n                {props.races.map(race => (\n                    <NavLink key={race.slug} to={'/results/races/' + race.slug} className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{race.name}</NavLink>\n                ))}\n            </div>}\n        </div>\n    )\n}\n\nfunction MobileRaceSelect(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <div className=\"items-center mx-6\">\n                <button onClick={() => setIsOpen(!isOpen)} to=\"/results\" className=\"flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                    <div>Race</div>\n                    <div>\n                        {isOpen ?\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                            </svg> :\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                            </svg>\n                        }\n                    </div>\n                </button>\n            </div>\n            {isOpen &&\n                <div onClick={() => setIsOpen(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                    {props.races.map(race => (\n                        <NavLink key={race.slug} to={'/results/races/' + race.slug} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{race.name}</NavLink>\n                    ))}\n                </div>\n            }\n        </div>\n    )\n}\n\nfunction MobileSessionSelect(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <div className=\"items-center mx-6\">\n                <button onClick={() => setIsOpen(!isOpen)} to=\"/results\" className=\"flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                    <div>Session</div>\n                    <div>\n                        {isOpen ?\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                            </svg> :\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                            </svg>\n                        }\n                    </div>\n                </button>\n            </div>\n            {isOpen &&\n                <div onClick={() => setIsOpen(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                    {props.links.map(link => (\n                        <NavLink key={link.href} to={'/results/races/' + props.slug + link.href} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{link.session}</NavLink>\n                    ))}\n                </div>\n            }\n        </div>\n    )\n}\n\nfunction RaceResultsTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Race Results'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Laps</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Time/Retired</TableHeader>\n                    <TableHeader className=\"text-right pr-4\">Pts</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.laps}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.gap}</TableCell>\n                            <TableCell className=\"text-right pr-4\">{s.points}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction FastestLapTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Fastest Laps'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Lap</TableHeader>\n                    <TableHeader>Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell text-right pr-4\">Avg Speed</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.lap}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"text-right pr-4 hidden sm:table-cell\">{s.speed}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction QualifyingTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Qualifying'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Q1</TableHeader>\n                    <TableHeader>Q2</TableHeader>\n                    <TableHeader>Q3</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.Q1}</TableCell>\n                            <TableCell>{s.Q2}</TableCell>\n                            <TableCell>{s.Q3}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction PracticeResultsTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - ' + props.session}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader className=\"\">Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nexport default function SessionResults(props) {\n    const results = useContext(AppContext);\n    const race = results.races ? results.races.find(race => race.slug === props.match.params.slug) : null;\n\n    const links = [];\n    const sessions = [\n        { key: 'race_results', session: 'Race Results', href: '/raceresults', component: RaceResultsTable },\n        { key: 'fastest_laps', session: 'Fastest Laps', href: '/fastestlaps', component: FastestLapTable },\n        { key: 'qualifying', session: 'Qualifying', href: '/qualifying', component: QualifyingTable },\n        { key: 'practice3', session: 'Practice 3', href: '/practice3', component: PracticeResultsTable },\n        { key: 'practice2', session: 'Practice 2', href: '/practice2', component: PracticeResultsTable },\n        { key: 'practice1', session: 'Practice 1', href: '/practice1', component: PracticeResultsTable },\n    ]\n    if (race) {\n        if (race.results) {\n            sessions.forEach(s => {\n                if (s.key in race.results) {\n                    links.push({\n                        session: s.session,\n                        href: s.href,\n                        component: s.component\n                    })\n                }\n            });\n        }\n    }\n\n    return (\n        <Card className=\"lg:flex lg:px-8 pt-4\">\n            {race && <div className=\"lg:hidden pt-2\">\n                <MobileRaceSelect races={results.races} />\n                <MobileSessionSelect className=\"mt-4\" slug={race.slug} links={links} />\n            </div>}\n            {race && <div className=\"hidden lg:block w-1/6 mt-4\">\n                <div className=\"fixed\">\n                    <DesktopDropDown className=\"\" races={results.races} />\n                    <SideNav className=\"mt-8\" slug={race.slug} links={links} />\n                </div>\n            </div>}\n            {race && <div className=\"flex-1 mt-4\">\n                <Switch>\n                    <Route exact path={'/results/races/' + race.slug}>\n                        { race && <Redirect to={'/results/races/' + race.slug + links[0].href} /> }\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/raceresults'}>\n                        <RaceResultsTable name={race.name} results={race.results.race_results} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/fastestlaps'}>\n                        <FastestLapTable name={race.name} laps={race.results.fastest_laps} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/qualifying'}>\n                        <QualifyingTable name={race.name} laps={race.results.qualifying} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice1'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 1'} results={race.results.practice1} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice2'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 2'} results={race.results.practice2} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice3'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 3'} results={race.results.practice3} />\n                    </Route>\n                </Switch>\n            </div>}\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function DriverStandings() {\n    const data = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Fastest Laps</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Grand Prix</TableHeader>\n                        <TableHeader>Driver</TableHeader>\n                        <TableHeader>Car</TableHeader>\n                        <TableHeader>Time</TableHeader>\n                        <TableHeader>Avg Speed</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {data.races && data.races.map(race => (\n                            <React.Fragment key={race.slug}>\n                                {race.results.fastest_laps && <TableRow key={race.name}>\n                                    <TableCell>\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <span className=\"hidden md:inline\">{race.results.fastest_laps[0].driver.first + ' '}</span>\n                                        <span className=\"hidden sm:inline\">{race.results.fastest_laps[0].driver.last}</span>\n                                        <span className=\"sm:hidden\">{race.results.fastest_laps[0].driver.abbr}</span>\n                                    </TableCell>\n                                    <TableCell className=\"text-xs uppercase\">{race.results.fastest_laps[0].car}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].time}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].speed}</TableCell>\n                                </TableRow>}\n                            </React.Fragment>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/Card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\n\nexport default function DriverResults(props) {\n    const results = useContext(AppContext);\n    const driver = results.drivers ? results.drivers.find(driver => driver.slug === props.match.params.slug) : null;\n\n    const raceResults = [];\n    if (results.races) {\n        results.races.forEach(race => {\n            if (race.results.race_results) {\n                const result = race.results.race_results.find(r => r.driver.number === driver.number);\n                if (result) {\n                    raceResults.push({\n                        name: race.name,\n                        date: race.date,\n                        slug: race.slug,\n                        driver: driver,\n                        points: result.points,\n                        pos: result.pos\n                    });\n                }\n            }\n        });\n    }\n\n    if (driver === null) {\n        return (<> </>)\n    }\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">{driver.first + ' ' + driver.last}</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Grand Prix</TableHeader>\n                        <TableHeader>Date</TableHeader>\n                        <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                        <TableHeader>Race Position</TableHeader>\n                        <TableHeader className=\"pr-4 text-right\">Pts</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {raceResults.map(r => (\n                            <TableRow key={r.name}>\n                                <TableCell className=\"text-gray-700\">\n                                    <Link to={'/results/races/' + r.slug} className=\"hover:underline\">{r.name}</Link>\n                                </TableCell>\n                                <TableCell>{r.date}</TableCell>\n                                <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{r.driver.car}</TableCell>\n                                <TableCell className=\"text-gray-700\">{r.pos}</TableCell>\n                                <TableCell className=\"pr-4 text-right text-gray-700\">{r.points}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React from 'react';\nimport DriverStandings from './routes/DriverStandings';\nimport TopBar from './components/TopBar';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport ConstructorStandings from './routes/ConstructorStandings';\nimport Races from './routes/Races';\nimport { AppProvider } from './context/AppContext';\nimport SessionResults from './routes/SessionResults';\nimport FastestLaps from './routes/FastestLaps';\nimport DriverResults from './routes/DriverResults';\n\nfunction App() {\n    return (\n        <AppProvider>\n            <HashRouter basename='/'>\n                <div className=\"antialiased text-gray-900 bg-gray-100 h-screen\">\n                    <TopBar className=\"fixed top-0\" />\n                    <div className=\"mt-12 py-4 sm:px-4\">\n                        <Switch>\n                            <Route exact path='/' component={DriverStandings} />\n                            <Route exact path='/results' component={DriverStandings} />\n                            <Route exact path='/results/drivers' component={DriverStandings} />\n                            <Route path='/results/constructors' component={ConstructorStandings} />\n                            <Route exact path='/results/races' component={Races} />\n                            <Route path='/results/races/:slug' component={SessionResults} />\n                            <Route exact path='/results/fastestlap' component={FastestLaps} />\n                            <Route path='/results/drivers/:slug' component={DriverResults} />\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        </AppProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["context/AppContext.tsx","components/Card.tsx","components/Table.tsx","components/DriverStandingsTable.tsx","routes/DriverStandings.tsx","components/TopBar.tsx","components/ConstructorStandingsTable.tsx","routes/ConstructorStandings.tsx","routes/Races.tsx","components/ResultsTables.tsx","components/Select.tsx","routes/SessionResults.tsx","routes/FastestLaps.tsx","routes/DriverResults.tsx","App.tsx","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","undefined","results","setResults","useEffect","a","url","fetch","res","json","d","fetchData","Provider","value","children","Card","className","Table","TableHead","TableHeader","TableBody","TableRow","TableCell","DriverStandingsTable","drivers","map","driver","key","position","to","slug","first","last","car","points","DriverStandings","useContext","StandingsDropdown","isOpen","setIsOpen","nodeRef","useRef","onMouseEnter","onMouseLeave","onTouchEnd","e","preventDefault","activeClassName","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","onClick","ref","races","length","TopBar","isMobileMenu","setIsMobileMenu","href","constructors","s","ConstructurStandings","RaceResults","race","Fragment","winner","name","date","laps","time","RaceResultsTable","year","abbr","pos","number","gap","FastestLapTable","lap","speed","QualifyingTable","Q1","Q2","Q3","PracticeResultsTable","session","Select","onChange","SessionResults","history","useHistory","currentSeasonResults","match","params","onMount","data","find","links","sessions","component","forEach","push","target","exact","path","race_results","fastest_laps","qualifying","practice1","practice2","practice3","DriverResults","raceResults","result","r","App","basename","ConstructorStandings","Races","FastestLaps","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa56f0dc.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { useEffect } from 'react';\nimport { Season } from '../types/types';\n\nexport const AppContext = createContext({} as Season | undefined);\n\ninterface AppProviderProps {\n    children: React.ReactNode;\n}\n\nexport const AppProvider = (props: AppProviderProps) => {\n    const [results, setResults] = useState<Season | undefined>(undefined);\n\n    useEffect(() => {\n        async function fetchData() {\n            const year = 2020;\n            const url = `https://raw.githubusercontent.com/Anden100/formula1point5/master/dump/data/${year}.json`;\n            const res = await fetch(url);\n            const d = await res.json();\n            setResults(d);\n        }\n        fetchData();\n    }, []);\n\n    const { Provider } = AppContext;\n\n    return (\n        <Provider value={ results }>\n            { props.children }\n        </Provider>\n    )\n}","import React from 'react';\n\ninterface CardProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport default function Card(props: CardProps) {\n    return (\n        <div className={'py-3 bg-white rounded-md shadow ' + props.className}>\n            {props.children}\n        </div>\n    )\n}","import React from 'react';\n\ninterface TableProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function Table(props: TableProps) {\n    return (\n        <table className={'w-full rounded-t-lg ' + props.className}>\n            { props.children}\n        </table>\n    )\n}\n\ninterface TableHeadProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function TableHead(props: TableHeadProps) {\n    return (\n        <thead className=\"text-left\">\n            <tr className=\"header-row\">\n                {props.children}\n            </tr>\n        </thead>\n    )\n}\n\ninterface TableHeaderProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function TableHeader(props: TableHeaderProps) {\n    return (\n        <th className={'pl-4 py-2 bg-gray-100 uppercase border-b tracking-wider font-semibold text-xs text-gray-600 ' + props.className}>\n            { props.children}\n        </th>\n    )\n}\n\ninterface TableBodyProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function TableBody(props: TableBodyProps) {\n    return (\n        <tbody className={props.className}>\n            { props.children}\n        </tbody>\n    )\n}\n\ninterface TableRowProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function TableRow(props: TableRowProps) {\n    return (\n        <tr className={'bg-white text-left text-gray-600 hover:bg-gray-100 font-semibold text-sm ' + props.className}>\n            { props.children}\n        </tr>\n    )\n}\n\ninterface TableCellProps {\n    className?: string;\n    children: React.ReactNode;\n}\n\nexport function TableCell(props: TableCellProps) {\n    return (\n        <td className={'pl-4 py-3 border-b ' + props.className}>\n            { props.children}\n        </td>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from '../components/Table';\nimport { Driver } from '../types/types';\n\ninterface DriverStandingsTableProps {\n    drivers: Driver[];\n}\n\nexport default function DriverStandingsTable(props: DriverStandingsTableProps) {\n    if (!props.drivers) return null;\n\n    return (\n        <Table>\n            <TableHead>\n                <TableHeader>Pos</TableHeader>\n                <TableHeader>Driver</TableHeader>\n                <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                <TableHeader className=\"text-right pr-4\">Points</TableHeader>\n            </TableHead>\n            <TableBody>\n                {props.drivers.map(driver => (\n                    <TableRow key={driver.position}>\n                        <TableCell>{driver.position}</TableCell>\n                        <TableCell className=\"text-gray-700 leading-snug\">\n                            <Link to={'/results/drivers/' + driver.slug} className=\"hover:underline\">\n                                <div>\n                                    <span className=\"lg:inline\">{driver.first + ' '}</span>\n                                    <span className=\"sm:inline\">{driver.last}</span>\n                                </div>\n                                <div className=\"sm:hidden text-gray-600 text-xs uppercase\">{driver.car}</div>\n                            </Link>\n                        </TableCell>\n                        <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{driver.car}</TableCell>\n                        <TableCell className=\"pr-4 text-right text-gray-700\">{driver.points}</TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport Card from '../components/Card';\nimport DriverStandingsTable from '../components/DriverStandingsTable';\n\nexport default function DriverStandings() {\n    const results = useContext(AppContext);\n\n    if (!results) {\n        return null;\n    }\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Driver Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <DriverStandingsTable drivers={results.drivers} />\n            </div>\n        </Card>\n    )\n}","import React, { useContext, useRef, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { AppContext } from '../context/AppContext';\n\ninterface StandingsDropdownProps {\n    className?: string;\n}\n\nfunction StandingsDropdown(props: StandingsDropdownProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const nodeRef = useRef(null);\n\n    const results = useContext(AppContext);\n\n    if (!results) {\n        return null;\n    }\n\n    return (\n        <div className={props.className} onMouseEnter={() => setIsOpen(true)} onMouseLeave={() => setIsOpen(false)}>\n            <div className=\"flex items-center\">\n                <NavLink to=\"/results\" onTouchEnd={(e: React.TouchEvent) => { setIsOpen(!isOpen); e.preventDefault() }} activeClassName='border-white-important' className=\"flex items-baseline block px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\">\n                    Results\n                    <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                </NavLink>\n            </div>\n            {/* <CSSTransition\n                in={isOpen}\n                nodeRef={nodeRef}\n                timeout={200}\n                classNames='flyout'\n            > */}\n            { isOpen &&\n                <div onClick={() => { setIsOpen(false) }} ref={nodeRef} className=\"absolute py-2 -mt-2 w-48 text-sm bg-white rounded-md shadow-lg transition duration-500\">\n                    <NavLink to=\"/results/drivers\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                    <NavLink to=\"/results/constructors\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                    <NavLink to=\"/results/races\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                    <NavLink to=\"/results/fastestlap\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                    {results.races &&\n                        <NavLink to={'/results/2020/' + results.races[results.races.length - 1].slug} className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n                </div>\n            }\n            {/* </CSSTransition> */}\n        </div>\n    )\n}\n\nexport default function TopBar() {\n    const results = useContext(AppContext);\n\n    const [isMobileMenu, setIsMobileMenu] = useState(false);\n\n    return (\n        <div className=\"absolute z-10\">\n            <div className=\"fixed top-0 w-full h-12 bg-red-100\">\n                <div className=\"w-full bg-red-700 flex items-center shadow-md justify-between\">\n                    <NavLink to=\"/results\" className=\"ml-5 mr-10\" href=\"#\">\n                        <svg className=\"h-5 text-white\" viewBox=\"0 0 1070 191\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M247 0c-30.928 0-73.729 17.729-95.598 39.598L0 191h107l91.009-91.009C214.02 83.98 245.356 71 268 71h290.145l71-71H247z\" fill=\"currentColor\" />\n                            <path d=\"M266.11 83c-17.673 0-42.136 10.126-54.639 22.616L126 191h101.103l29.309-29.279c7.033-7.025 20.793-12.721 30.734-12.721h192.787L546 83H266.11zM644 0h119.771l-190 190H454L644 0zM660.376 114.6h100.587c56.569 0 100.951.728 101.497 1.637.545.91-.364 2.729-2.001 4.002-2.365 2.001-22.191 2.729-106.044 3.092l-102.952.364L630 145.524h37.106l37.288.182-23.646 22.556L657.102 191l110.046-.546c109.863-.364 110.045-.364 120.231-4.547 16.007-6.367 30.74-16.736 48.566-34.198 16.734-16.736 22.191-24.921 26.01-39.656 2.911-11.642-1.273-22.92-10.731-28.74-6.73-4.184-7.458-4.184-76.214-4.73-38.379-.364-71.01.91-71.01 0 0-.728 5-5.083 6.529-7.276l3.971-4.002h188.2L1070 0H776.06L660.376 114.6z\" fill=\"currentColor\" />\n                            <path d=\"M585 191h61.38L684 153h-61.38L585 191z\" fill=\"currentColor\" />\n                        </svg>\n                    </NavLink>\n                    <div className=\"flex flex-1 items-center\">\n                        <StandingsDropdown className=\"hidden sm:block\" />\n                    </div>\n                    <div className=\"flex items-center\">\n                        <button onClick={() => setIsMobileMenu(!isMobileMenu)} className=\"sm:hidden p-3 mr-2\">\n                            <svg className=\"text-white h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                { isMobileMenu && <div onClick={() => setIsMobileMenu(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                    <NavLink to=\"/results/drivers\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                    <NavLink to=\"/results/constructors\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                    <NavLink to=\"/results/races\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                    <NavLink to=\"/results/fastestlap\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                    {results &&\n                        <NavLink to={'/results/2020/' + results.races[results.races.length - 1].slug} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n                </div>}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport { Constructor } from '../types/types';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from './Table';\n\ninterface DriverStandingsTableProps {\n    constructors: Constructor[];\n}\n\nexport default function DriverStandingsTable(props: DriverStandingsTableProps) {\n    if (!props.constructors) return null;\n\n    return (\n        <Table className=\"mt-4\">\n            <TableHead>\n                <TableHeader>Pos</TableHeader>\n                <TableHeader>Team</TableHeader>\n                <TableHeader className='text-right pr-4'>Points</TableHeader>\n            </TableHead>\n            <TableBody>\n                {props.constructors.map(s => (\n                    <TableRow key={s.position}>\n                        <TableCell>\n                            {s.position}\n                        </TableCell>\n                        <TableCell className=\"text-xs uppercase\">\n                            {s.car}\n                        </TableCell>\n                        <TableCell className=\"text-right text-gray-700 pr-4\">\n                            {s.points}\n                        </TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    )\n}","import React, { useContext } from 'react';\nimport Card from '../components/Card';\nimport { AppContext } from '../context/AppContext';\nimport ConstructorStandingsTable from '../components/ConstructorStandingsTable';\n\nexport default function ConstructurStandings() {\n    const results = useContext(AppContext);\n\n    if (!results) {\n        return null;\n    }\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Constructor Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <ConstructorStandingsTable constructors={results.constructors} />\n            </div>\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHeader, TableHead, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function RaceResults() {\n    const results = useContext(AppContext);\n\n    if (!results) return null;\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Race Results</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader className=\"\">Grand Prix</TableHeader>\n                        <TableHeader className=\"hidden md:table-cell\">Date</TableHeader>\n                        <TableHeader className=\"\">Winner</TableHeader>\n                        <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                        <TableHeader className=\"hidden xs:table-cell\">Laps</TableHeader>\n                        <TableHeader className=\"hidden lg:table-cell\">Time</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {results.races && results.races.map(race => (\n                            <React.Fragment key={race.slug}>\n                                {race.winner && <TableRow key={race.name}>\n                                    <TableCell className=\"\">\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"hidden md:table-cell\">{race.date}</TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <div>\n                                            <span className=\"lg:inline\">{race.winner.first + ' '}</span>\n                                            <span className=\"sm:inline\">{race.winner.last}</span>\n                                        </div>\n                                        <div className=\"sm:hidden text-gray-600 text-xs uppercase\">{race.car}</div>\n                                    </TableCell>\n                                    <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{race.car}</TableCell>\n                                    <TableCell className=\"hidden xs:table-cell\">{race.laps}</TableCell>\n                                    <TableCell className=\"hidden lg:table-cell\">{race.time}</TableCell>\n                                </TableRow>}\n                            </React.Fragment>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React from 'react';\nimport { FastestLap, Practice, Qualifying, RaceResult } from '../types/types';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from './Table';\n\ninterface RaceResultsTableProps {\n    year: string;\n    name: string;\n    className?: string;\n    results: RaceResult[];\n}\n\nexport function RaceResultsTable(props: RaceResultsTableProps) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{props.year + ' ' + props.name + ' - Race Results'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Laps</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Time/Retired</TableHeader>\n                    <TableHeader className=\"text-right pr-4\">Pts</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.laps}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.gap}</TableCell>\n                            <TableCell className=\"text-right pr-4\">{s.points}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\ninterface FastestLapTableProps {\n    className?: string;\n    year: string;\n    name: string;\n    laps: FastestLap[];\n}\n\nexport function FastestLapTable(props: FastestLapTableProps) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{props.year + ' ' + props.name + ' - Fastest Laps'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Lap</TableHeader>\n                    <TableHeader>Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell text-right pr-4\">Avg Speed</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.lap}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"text-right pr-4 hidden sm:table-cell\">{s.speed}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\ninterface QualifyingTableProps {\n    className?: string;\n    year: string;\n    name: string;\n    laps: Qualifying[];\n}\n\nexport function QualifyingTable(props: QualifyingTableProps) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{props.year + ' ' + props.name + ' - Qualifying'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Q1</TableHeader>\n                    <TableHeader>Q2</TableHeader>\n                    <TableHeader>Q3</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.Q1}</TableCell>\n                            <TableCell>{s.Q2}</TableCell>\n                            <TableCell>{s.Q3}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\ninterface PracticeResultsTableProps {\n    className?: string;\n    year: string;\n    name: string;\n    session: string;\n    results: Practice[];\n}\n\nexport function PracticeResultsTable(props: PracticeResultsTableProps) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{props.year + ' ' + props.name + ' - ' + props.session}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader className=\"\">Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}","import React, { ChangeEvent } from 'react';\n\ninterface SelectProps {\n    className?: string;\n    value: any;\n    onChange(event: ChangeEvent<HTMLSelectElement>): void;\n    children: React.ReactNode;\n}\n\nexport default function Select(props: SelectProps) {\n    return (\n        <div className={'relative ' + props.className}>\n            <select value={props.value} onChange={props.onChange} className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-2 md:py-3 px-2 md:px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\">\n                {props.children}\n            </select>\n            <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" /></svg>\n            </div>\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Redirect, Route, RouteComponentProps, Switch, useHistory } from 'react-router-dom';\nimport { RaceResultsTable, FastestLapTable, QualifyingTable, PracticeResultsTable } from '../components/ResultsTables';\nimport Card from '../components/Card';\nimport Select from '../components/Select';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Season } from '../types/types';\n\ninterface TParams {\n    slug: string;\n    session: string;\n    year: string;\n}\n\nexport default function SessionResults(props: RouteComponentProps<TParams>) {\n    const history = useHistory();\n    const currentSeasonResults = useContext(AppContext);\n    const [results, setResults] = useState<Season | undefined>(undefined);\n    const year = props.match.params.year;\n    const session = props.match.params.session;\n    const slug = props.match.params.slug;\n\n    useEffect(() => {\n        const onMount = async (year: string) => {\n            const res = await fetch(`https://raw.githubusercontent.com/Anden100/formula1point5/master/dump/data/${year}.json`);\n            const data = await res.json();\n            setResults(data);\n        }\n        if (year === '2020') {\n            setResults(currentSeasonResults);\n        }\n        else {\n            onMount(year);\n        }\n    }, [year, currentSeasonResults]);\n\n    if (!results) return null;\n\n    const race = results.races ? results.races.find(race => race.slug === slug) : null;\n\n    const links: { session: string; href: string }[] = [];\n    const sessions = [\n        { key: 'race_results', session: 'Race Results', href: '/raceresults', component: RaceResultsTable },\n        { key: 'fastest_laps', session: 'Fastest Laps', href: '/fastestlaps', component: FastestLapTable },\n        { key: 'qualifying', session: 'Qualifying', href: '/qualifying', component: QualifyingTable },\n        { key: 'practice3', session: 'Practice 3', href: '/practice3', component: PracticeResultsTable },\n        { key: 'practice2', session: 'Practice 2', href: '/practice2', component: PracticeResultsTable },\n        { key: 'practice1', session: 'Practice 1', href: '/practice1', component: PracticeResultsTable },\n    ]\n\n    if (race) {\n        if (race.results) {\n            sessions.forEach(s => {\n                if (s.key in race.results) {\n                    links.push({\n                        session: s.session,\n                        href: s.href,\n                    })\n                }\n            });\n        }\n    }\n\n    const onChangeRace = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const race = e.target.value;\n        history.push('/results/' + year + '/' + race + '/' + session);\n    }\n\n    const onChangeSession = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const session = e.target.value;\n        history.push('/results/' + year + '/' + slug + session);\n    }\n\n    const onChangeYear = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const year = e.target.value;\n        history.push('/results/' + year + '/' + slug + '/' + session);\n    }\n\n    return (\n        <Card className=\"lg:px-8 pt-4\">\n            <div className=\"flex flex-col md:flex-row\">\n                <Select className='m-2 flex-1' value={year} onChange={onChangeYear}>\n                    <option>2020</option>\n                    <option>2019</option>\n                </Select>\n                <Select className='m-2 flex-1' value={slug} onChange={onChangeRace}>\n                    {results.races.map(race => (\n                        <option key={race.slug} value={race.slug}>{race.name}</option>\n                    ))}\n                </Select>\n                <Select className='m-2 flex-1' value={'/' + session} onChange={onChangeSession}>\n                    {links.map(s => (\n                        <option key={s.href} value={s.href}>{s.session}</option>\n                    ))}\n                </Select>\n            </div>\n            {race && <div className=\"flex-1 mt-4\">\n                <Switch>\n                    <Route exact path={'/results/' + year + '/' + race.slug}>\n                        {race && <Redirect to={'/results/' + year + '/' + race.slug + links[0].href} />}\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/raceresults'}>\n                        <RaceResultsTable name={race.name} year={year} results={race.results.race_results!} />\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/fastestlaps'}>\n                        <FastestLapTable name={race.name} year={year} laps={race.results.fastest_laps!} />\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/qualifying'}>\n                        <QualifyingTable name={race.name} year={year} laps={race.results.qualifying!} />\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/practice1'}>\n                        <PracticeResultsTable name={race.name} year={year} session={'Practice 1'} results={race.results.practice1!} />\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/practice2'}>\n                        <PracticeResultsTable name={race.name} year={year} session={'Practice 2'} results={race.results.practice2!} />\n                    </Route>\n                    <Route exact path={'/results/' + year + '/' + race.slug + '/practice3'}>\n                        <PracticeResultsTable name={race.name} year={year} session={'Practice 3'} results={race.results.practice3!} />\n                    </Route>\n                </Switch>\n            </div>}\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function DriverStandings() {\n    const results = useContext(AppContext);\n\n    if (!results) {\n        return null;\n    }\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Fastest Laps</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Grand Prix</TableHeader>\n                        <TableHeader>Driver</TableHeader>\n                        <TableHeader>Car</TableHeader>\n                        <TableHeader>Time</TableHeader>\n                        <TableHeader>Avg Speed</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {results.races && results.races.map(race => (\n                            <React.Fragment key={race.slug}>\n                                {race.results.fastest_laps && <TableRow key={race.name}>\n                                    <TableCell>\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <span className=\"hidden md:inline\">{race.results.fastest_laps[0].driver.first + ' '}</span>\n                                        <span className=\"hidden sm:inline\">{race.results.fastest_laps[0].driver.last}</span>\n                                        <span className=\"sm:hidden\">{race.results.fastest_laps[0].driver.abbr}</span>\n                                    </TableCell>\n                                    <TableCell className=\"text-xs uppercase\">{race.results.fastest_laps[0].car}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].time}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].speed}</TableCell>\n                                </TableRow>}\n                            </React.Fragment>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport Card from '../components/Card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\nimport { Driver } from '../types/types';\n\ntype TParams = { slug: string; }\n\ninterface RaceResult {\n    name: string;\n    date: string;\n    slug: string;\n    driver: Driver;\n    points: number;\n    pos: number;\n}\n\nexport default function DriverResults(props: RouteComponentProps<TParams>) {\n    const results = useContext(AppContext);\n    if (!results) {\n        return null;\n    }\n\n    const driver = results.drivers ? results.drivers.find(driver => driver.slug === props.match.params.slug) : null;\n    if (!driver) {\n        return null;\n    }\n\n    const raceResults: RaceResult[] = [];\n    if (results.races) {\n        results.races.forEach(race => {\n            if (race.results.race_results) {\n                const result = race.results.race_results.find(r => r.driver.number === driver.number);\n                if (result) {\n                    raceResults.push({\n                        name: race.name,\n                        date: race.date,\n                        slug: race.slug,\n                        driver: driver,\n                        points: result.points,\n                        pos: result.pos\n                    });\n                }\n            }\n        });\n    }\n\n    if (driver === null) {\n        return (<> </>)\n    }\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">{driver.first + ' ' + driver.last}</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Grand Prix</TableHeader>\n                        <TableHeader>Date</TableHeader>\n                        <TableHeader className=\"hidden sm:table-cell\">Car</TableHeader>\n                        <TableHeader>Race Position</TableHeader>\n                        <TableHeader className=\"pr-4 text-right\">Pts</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {raceResults.map(r => (\n                            <TableRow key={r.name}>\n                                <TableCell className=\"text-gray-700\">\n                                    <Link to={'/results/races/' + r.slug} className=\"hover:underline\">{r.name}</Link>\n                                </TableCell>\n                                <TableCell>{r.date}</TableCell>\n                                <TableCell className=\"hidden sm:table-cell text-xs uppercase\">{r.driver.car}</TableCell>\n                                <TableCell className=\"text-gray-700\">{r.pos}</TableCell>\n                                <TableCell className=\"pr-4 text-right text-gray-700\">{r.points}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React from 'react';\nimport DriverStandings from './routes/DriverStandings';\nimport TopBar from './components/TopBar';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport ConstructorStandings from './routes/ConstructorStandings';\nimport Races from './routes/Races';\nimport { AppProvider } from './context/AppContext';\nimport SessionResults from './routes/SessionResults';\nimport FastestLaps from './routes/FastestLaps';\nimport DriverResults from './routes/DriverResults';\n\nfunction App() {\n    return (\n        <AppProvider>\n            <HashRouter basename='/'>\n                <div className=\"antialiased text-gray-900 bg-gray-100\">\n                    <TopBar />\n                    <div className=\"mt-12 py-4 sm:px-4\">\n                        <div className=\"container mx-auto\">\n                            <Switch>\n                                <Route exact path='/' component={DriverStandings} />\n                                <Route exact path='/results' component={DriverStandings} />\n                                <Route exact path='/results/drivers' component={DriverStandings} />\n                                <Route path='/results/constructors' component={ConstructorStandings} />\n                                <Route exact path='/results/races' component={Races} />\n                                <Route path='/results/:year/:slug/:session' component={SessionResults} />\n                                <Route path='/results/:year/:slug' component={SessionResults} />\n                                <Route exact path='/results/fastestlap' component={FastestLaps} />\n                                <Route path='/results/drivers/:slug' component={DriverResults} />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </HashRouter>\n        </AppProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
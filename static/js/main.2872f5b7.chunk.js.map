{"version":3,"sources":["components/Table.jsx","context/AppContext.jsx","components/Card.jsx","routes/DriverStandings.jsx","components/TopBar.jsx","routes/ConstructorStandings.jsx","routes/Races.jsx","routes/RaceResults.jsx","routes/FastestLaps.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","props","className","children","TableHead","TableHeader","TableBody","TableRow","TableCell","AppContext","createContext","AppProvider","useState","data","setData","useEffect","console","log","fetch","then","res","json","d","Provider","value","Card","DriverStandings","results","useContext","drivers","map","driver","key","position","first","last","abbr","car","points","StandingsDropdown","isOpen","setIsOpen","nodeRef","useRef","onMouseEnter","onMouseLeave","to","activeClassName","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","onClick","ref","races","length","slug","TopBar","isMobileMenu","setIsMobileMenu","href","ConstructurStandings","constructors","s","race","winner","name","date","laps","time","SideNav","links","link","exact","session","DesktopDropDown","MobileRaceSelect","MobileSessionSelect","RaceResultsTable","pos","number","FastestLapTable","lap","speed","QualifyingTable","Q1","Q2","Q3","PracticeResultsTable","RaceResults","find","match","params","sessions","component","forEach","push","path","race_results","fastest_laps","qualifying","practice1","practice2","practice3","App","basename","ConstructorStandings","Races","FastestLaps","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2872f5b7.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Table(props) {\n    return (\n        <table className={'w-full rounded-t-lg ' + props.className}>\n            { props.children}\n        </table>\n    )\n}\n\nexport function TableHead(props) {\n    return (\n        <thead className=\"text-left\">\n            <tr className=\"header-row\">\n                {props.children}\n            </tr>\n        </thead>\n    )\n}\n\n// rounded-tl-lg \nexport function TableHeader(props) {\n    return (\n        <th className={'pl-4 py-2 bg-gray-100 uppercase border-b tracking-wider font-semibold text-xs text-gray-600 ' + props.className}>\n            { props.children}\n        </th>\n    )\n}\n\nexport function TableBody(props) {\n    return (\n        <tbody className={props.className}>\n            { props.children}\n        </tbody>\n    )\n}\n\nexport function TableRow(props) {\n    return (\n        <tr className={'bg-white text-left text-gray-600 hover:bg-gray-100 font-semibold text-sm ' + props.className}>\n            { props.children}\n        </tr>\n    )\n}\n\nexport function TableCell(props) {\n    return (\n        <td className={'pl-4 py-3 border-b ' + props.className}>\n            { props.children}\n        </td>\n    )\n}","import React, { createContext, useEffect, useState } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({children}) => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        console.log('Fetching...');\n        fetch('https://raw.githubusercontent.com/Anden100/formula1point5/master/public/2020.json').then(res => res.json()).then(d => {\n            console.log(data);\n            setData(d);\n        });\n    }, []);\n\n    const { Provider } = AppContext;\n\n    return (\n        <Provider value={data}>\n            { children }\n        </Provider>\n    )\n}","import React from 'react';\n\nexport default function Card(props) {\n    return (\n        <div className={'py-3 bg-white rounded-md shadow ' + props.className}>\n            {props.children}\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\nimport Card from '../components/Card';\n\nexport default function DriverStandings() {\n    const results = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Driver Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table>\n                    <TableHead>\n                        <TableHeader>Pos</TableHeader>\n                        <TableHeader>Driver</TableHeader>\n                        <TableHeader>Car</TableHeader>\n                        <TableHeader className=\"text-right pr-4\">Points</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        { results.drivers && results.drivers.map(driver => (\n                            <TableRow key={driver.position}>\n                                <TableCell>{driver.position}</TableCell>\n                                <TableCell className=\"text-gray-700\">\n                                    <span className=\"hidden lg:inline\">{driver.first + ' '}</span>\n                                    <span className=\"hidden sm:inline\">{driver.last}</span>\n                                    <span className=\"sm:hidden\">{driver.abbr}</span>\n                                </TableCell>\n                                <TableCell className=\"text-xs uppercase\">{driver.car}</TableCell>\n                                <TableCell className=\"pr-4 text-right text-gray-700\">{driver.points}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext, useRef, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport { AppContext } from '../context/AppContext';\n\nfunction StandingsDropdown(props) {\n    const [isOpen, setIsOpen] = useState(false);\n    const nodeRef = useRef(null);\n\n    const results = useContext(AppContext);\n\n    return (\n        <div className={props.className} onMouseEnter={() => setIsOpen(true)} onMouseLeave={() => setIsOpen(false)}>\n            <div className=\"flex items-center\">\n                <NavLink to=\"/results\" activeClassName='border-white-important' className=\"flex items-baseline block px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\">\n                    Results\n                    <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                </NavLink>\n            </div>\n            {/* <CSSTransition\n                in={isOpen}\n                nodeRef={nodeRef}\n                timeout={200}\n                classNames='flyout'\n            > */}\n            { isOpen &&\n                <div onClick={() => { setIsOpen(false) }} ref={nodeRef} className=\"absolute py-2 -mt-2 w-48 text-sm bg-white rounded-md shadow-lg transition duration-500\">\n                    <NavLink to=\"/results/drivers\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                    <NavLink to=\"/results/constructors\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                    <NavLink to=\"/results/races\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                    <NavLink to=\"/results/fastestlap\" className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                    {results.races &&\n                        <NavLink to={'/results/races/' + results.races[results.races.length - 1].slug} className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n                </div>\n            }\n            {/* </CSSTransition> */}\n        </div>\n    )\n}\n\nexport default function TopBar(props) {\n    const results = useContext(AppContext);\n\n    const [isMobileMenu, setIsMobileMenu] = useState(false);\n\n    return (\n        <div className={'w-full ' + props.className}>\n            <div className=\"w-full bg-red-700 flex items-center px-5 shadow-md justify-between\">\n                <NavLink to=\"/results\" className=\"mr-10\" href=\"#\">\n                    <svg className=\"h-5 text-white\" viewBox=\"0 0 1070 191\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M247 0c-30.928 0-73.729 17.729-95.598 39.598L0 191h107l91.009-91.009C214.02 83.98 245.356 71 268 71h290.145l71-71H247z\" fill=\"currentColor\" />\n                        <path d=\"M266.11 83c-17.673 0-42.136 10.126-54.639 22.616L126 191h101.103l29.309-29.279c7.033-7.025 20.793-12.721 30.734-12.721h192.787L546 83H266.11zM644 0h119.771l-190 190H454L644 0zM660.376 114.6h100.587c56.569 0 100.951.728 101.497 1.637.545.91-.364 2.729-2.001 4.002-2.365 2.001-22.191 2.729-106.044 3.092l-102.952.364L630 145.524h37.106l37.288.182-23.646 22.556L657.102 191l110.046-.546c109.863-.364 110.045-.364 120.231-4.547 16.007-6.367 30.74-16.736 48.566-34.198 16.734-16.736 22.191-24.921 26.01-39.656 2.911-11.642-1.273-22.92-10.731-28.74-6.73-4.184-7.458-4.184-76.214-4.73-38.379-.364-71.01.91-71.01 0 0-.728 5-5.083 6.529-7.276l3.971-4.002h188.2L1070 0H776.06L660.376 114.6z\" fill=\"currentColor\" />\n                        <path d=\"M585 191h61.38L684 153h-61.38L585 191z\" fill=\"currentColor\" />\n                    </svg>\n                </NavLink>\n                {/* <NavLink to='/calendar' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Calendar\n            </NavLink> */}\n                <div className=\"flex flex-1 items-center\">\n                    <StandingsDropdown className=\"hidden sm:block\" />\n                </div>\n                {/* <NavLink to='/teams' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Teams\n            </NavLink>\n            <NavLink to='/drivers' activeClassName='border-white-important' className=\"px-2 py-3 border-b-2 border-red-700 hover:bg-red-900 hover:border-red-900 text-white text-sm tracking-wide transition-colors duration-200\" href=\"#\">\n                Drivers\n            </NavLink> */}\n                <div className=\"flex items-center\">\n                    <button onClick={() => setIsMobileMenu(!isMobileMenu)} className=\"sm:hidden py-3\">\n                        <svg className=\"text-white h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            { isMobileMenu && <div onClick={() => setIsMobileMenu(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                <NavLink to=\"/results/drivers\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Drivers</NavLink>\n                <NavLink to=\"/results/constructors\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Constructors</NavLink>\n                <NavLink to=\"/results/races\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Races</NavLink>\n                <NavLink to=\"/results/fastestlap\" className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Fastest Laps</NavLink>\n                {results.races &&\n                        <NavLink to={'/results/races/' + results.races[results.races.length - 1].slug} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">Season</NavLink>\n                    }\n            </div>}\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport Card from '../components/Card';\nimport { Table, TableHead, TableHeader, TableBody, TableRow, TableCell } from '../components/Table';\nimport { AppContext } from '../context/AppContext';\n\nexport default function ConstructurStandings() {\n    const results = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Constructor Standings</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Pos</TableHeader>\n                        <TableHeader>Team</TableHeader>\n                        <TableHeader className='text-right pr-4'>Points</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {results.constructors && results.constructors.map(s => (\n                            <TableRow key={s.position}>\n                                <TableCell>\n                                    {s.position}\n                                </TableCell>\n                                <TableCell className=\"text-xs uppercase\">\n                                    {s.car}\n                                </TableCell>\n                                <TableCell className=\"text-right text-gray-700 pr-4\">\n                                    {s.points}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHeader, TableHead, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function DriverStandings() {\n    const data = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Race Results</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader className=\"\">Grand Prix</TableHeader>\n                        <TableHeader className=\"hidden md:table-cell\">Date</TableHeader>\n                        <TableHeader className=\"\">Winner</TableHeader>\n                        <TableHeader>Car</TableHeader>\n                        <TableHeader className=\"hidden xs:table-cell\">Laps</TableHeader>\n                        <TableHeader className=\"hidden lg:table-cell\">Time</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {data.races && data.races.map(race => (\n                            <>\n                                {race.winner && <TableRow key={race.name}>\n                                    <TableCell className=\"\">\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"hidden md:table-cell\">{race.date}</TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <span className=\"hidden lg:inline\">{race.winner.first + ' '}</span>\n                                        <span className=\"hidden sm:inline\">{race.winner.last}</span>\n                                        <span className=\"sm:hidden\">{race.winner.abbr}</span>\n                                    </TableCell>\n                                    <TableCell className=\"text-xs uppercase\">{race.car}</TableCell>\n                                    <TableCell className=\"hidden xs:table-cell\">{race.laps}</TableCell>\n                                    <TableCell className=\"hidden lg:table-cell\">{race.time}</TableCell>\n                                </TableRow>}\n                            </>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React, { useContext, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { NavLink, Redirect, Route, Switch } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nfunction SideNav(props) {\n    return (\n        <div className={props.className}>\n            <ul className=\"text-gray-700 space-y-2\">\n                {props.links.map(link => (\n                    <li key={link.href}>\n                        <NavLink exact to={'/results/races/' + props.slug + link.href} activeClassName=\"font-semibold text-gray-900\" className=\"w-full block hover:underline\">{link.session}</NavLink>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nfunction DesktopDropDown(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <button onClick={() => setIsOpen(!isOpen)} className=\"flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                <div>Race</div>\n                <div>\n                    {isOpen ?\n                        <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                        </svg> :\n                        <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    }\n                </div>\n            </button>\n\n            { isOpen &&\n                <button onClick={() => setIsOpen(false)} className=\"absolute top-0 top-0 right-0 bottom-0 left-0 h-full w-full opacity-0 cursor-default\"></button>\n            }\n\n            { isOpen && <div onClick={() => { setIsOpen(false) }} className=\"absolute py-2 w-48 text-sm bg-white rounded-md shadow-lg transition duration-500\">\n                {props.races.map(race => (\n                    <NavLink key={race.slug} to={'/results/races/' + race.slug} className=\"block px-4 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{race.name}</NavLink>\n                ))}\n            </div>}\n        </div>\n    )\n}\n\nfunction MobileRaceSelect(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <div className=\"items-center mx-6\">\n                <button onClick={() => setIsOpen(!isOpen)} to=\"/results\" className=\"flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                    <div>Race</div>\n                    <div>\n                        {isOpen ?\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                            </svg> :\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                            </svg>\n                        }\n                    </div>\n                </button>\n            </div>\n            {isOpen &&\n                <div onClick={() => setIsOpen(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                    {props.races.map(race => (\n                        <NavLink key={race.slug} to={'/results/races/' + race.slug} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{race.name}</NavLink>\n                    ))}\n                </div>\n            }\n        </div>\n    )\n}\n\nfunction MobileSessionSelect(props) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <div className={props.className}>\n            <div className=\"items-center mx-6\">\n                <button onClick={() => setIsOpen(!isOpen)} to=\"/results\" className=\"flex items-baseline justify-between block text-gray-700 hover:text-gray-900 text-lg tracking-wide transition-font duration-200\">\n                    <div>Session</div>\n                    <div>\n                        {isOpen ?\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                            </svg> :\n                            <svg className=\"ml-1 w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                            </svg>\n                        }\n                    </div>\n                </button>\n            </div>\n            {isOpen &&\n                <div onClick={() => setIsOpen(false)} className=\"mt-2 text-sm bg-gray-200 w-full\">\n                    {props.links.map(link => (\n                        <NavLink key={link.href} to={'/results/races/' + props.slug + link.href} className=\"block px-6 py-2 hover:bg-red-600 hover:text-white transition duration-200\">{link.session}</NavLink>\n                    ))}\n                </div>\n            }\n        </div>\n    )\n}\n\nfunction RaceResultsTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Race Results'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Laps</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Time/Retired</TableHeader>\n                    <TableHeader className=\"text-right pr-4\">Pts</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.laps}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.time}</TableCell>\n                            <TableCell className=\"text-right pr-4\">{s.points}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction FastestLapTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Fastest Laps'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Lap</TableHeader>\n                    <TableHeader>Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell text-right pr-4\">Avg Speed</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.lap}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"text-right pr-4 hidden sm:table-cell\">{s.speed}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction QualifyingTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - Qualifying'}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader>Q1</TableHeader>\n                    <TableHeader>Q2</TableHeader>\n                    <TableHeader>Q3</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.laps && props.laps.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.Q1}</TableCell>\n                            <TableCell>{s.Q2}</TableCell>\n                            <TableCell>{s.Q3}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nfunction PracticeResultsTable(props) {\n    return (\n        <div className={'flex-1 ' + props.className}>\n            <h2 className=\"text-xl mx-6 lg:mx-0 md:text-2xl\">{'2020 ' + props.name + ' - ' + props.session}</h2>\n            <Table className=\"mt-4\">\n                <TableHead>\n                    <TableHeader>Pos</TableHeader>\n                    <TableHeader className=\"hidden lg:table-cell\">No</TableHeader>\n                    <TableHeader>Driver</TableHeader>\n                    <TableHeader className=\"hidden md:table-cell\">Car</TableHeader>\n                    <TableHeader className=\"\">Time</TableHeader>\n                    <TableHeader className=\"hidden sm:table-cell\">Laps</TableHeader>\n                </TableHead>\n                <TableBody>\n                    {props.results && props.results.map(s => (\n                        <TableRow key={s.driver.abbr}>\n                            <TableCell>{s.pos}</TableCell>\n                            <TableCell className=\"hidden lg:table-cell\">{s.driver.number}</TableCell>\n                            <TableCell className=\"text-gray-700\">\n                                <span className=\"hidden md:inline\">{s.driver.first + ' '}</span>\n                                <span className=\"hidden sm:inline\">{s.driver.last}</span>\n                                <span className=\"sm:hidden\">{s.driver.abbr}</span>\n                            </TableCell>\n                            <TableCell className=\"hidden md:table-cell text-xs uppercase\">{s.car}</TableCell>\n                            <TableCell>{s.time}</TableCell>\n                            <TableCell className=\"hidden sm:table-cell\">{s.laps}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    )\n}\n\nexport default function RaceResults(props) {\n    const results = useContext(AppContext);\n    const race = results.races ? results.races.find(race => race.slug === props.match.params.slug) : null;\n\n    const links = [];\n    const sessions = [\n        { key: 'race_results', session: 'Race Results', href: '/raceresults', component: RaceResultsTable },\n        { key: 'fastest_laps', session: 'Fastest Laps', href: '/fastestlaps', component: FastestLapTable },\n        { key: 'qualifying', session: 'Qualifying', href: '/qualifying', component: QualifyingTable },\n        { key: 'practice3', session: 'Practice 3', href: '/practice3', component: PracticeResultsTable },\n        { key: 'practice2', session: 'Practice 2', href: '/practice2', component: PracticeResultsTable },\n        { key: 'practice1', session: 'Practice 1', href: '/practice1', component: PracticeResultsTable },\n    ]\n    if (race) {\n        if (race.results) {\n            sessions.forEach(s => {\n                if (s.key in race.results) {\n                    links.push({\n                        session: s.session,\n                        href: s.href,\n                        component: s.component\n                    })\n                }\n            });\n        }\n    }\n\n    return (\n        <Card className=\"lg:flex lg:px-8 pt-4\">\n            {race && <div className=\"lg:hidden pt-2\">\n                <MobileRaceSelect races={results.races} />\n                <MobileSessionSelect className=\"mt-4\" slug={race.slug} links={links} />\n            </div>}\n            {race && <div className=\"hidden lg:block w-1/6 mt-4\">\n                <DesktopDropDown className=\"\" races={results.races} />\n                <SideNav className=\"mt-8\" slug={race.slug} links={links} />\n            </div>}\n            {race && <div className=\"flex-1 mt-4\">\n                <Switch>\n                    <Route exact path={'/results/races/' + race.slug}>\n                        { race && <Redirect to={'/results/races/' + race.slug + links[0].href} /> }\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/raceresults'}>\n                        <RaceResultsTable name={race.name} results={race.results.race_results} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/fastestlaps'}>\n                        <FastestLapTable name={race.name} laps={race.results.fastest_laps} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/qualifying'}>\n                        <QualifyingTable name={race.name} laps={race.results.qualifying} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice1'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 1'} results={race.results.practice1} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice2'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 2'} results={race.results.practice2} />\n                    </Route>\n                    <Route exact path={'/results/races/' + race.slug + '/practice3'}>\n                        <PracticeResultsTable name={race.name} session={'Practice 3'} results={race.results.practice3} />\n                    </Route>\n                </Switch>\n            </div>}\n        </Card>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { Link } from 'react-router-dom';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../components/Table';\nimport Card from '../components/Card';\n\nexport default function DriverStandings() {\n    const data = useContext(AppContext);\n\n    return (\n        <Card>\n            <h2 className=\"px-4 md:px-6 text-xl md:text-2xl\">2020 Fastest Laps</h2>\n            <div className=\"mt-2 sm:px-4 md:px-6\">\n                <Table className=\"mt-4\">\n                    <TableHead>\n                        <TableHeader>Grand Prix</TableHeader>\n                        <TableHeader>Driver</TableHeader>\n                        <TableHeader>Car</TableHeader>\n                        <TableHeader>Time</TableHeader>\n                        <TableHeader>Avg Speed</TableHeader>\n                    </TableHead>\n                    <TableBody>\n                        {data.races && data.races.map(race => (\n                            <>\n                                {race.results.fastest_laps && <TableRow key={race.name}>\n                                    <TableCell>\n                                        <Link to={'/results/races/' + race.slug} className=\"hover:underline\">{race.name}</Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-gray-700\">\n                                        <span className=\"hidden md:inline\">{race.results.fastest_laps[0].driver.first + ' '}</span>\n                                        <span className=\"hidden sm:inline\">{race.results.fastest_laps[0].driver.last}</span>\n                                        <span className=\"sm:hidden\">{race.results.fastest_laps[0].driver.abbr}</span>\n                                    </TableCell>\n                                    <TableCell className=\"text-xs uppercase\">{race.results.fastest_laps[0].car}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].time}</TableCell>\n                                    <TableCell>{race.results.fastest_laps[0].speed}</TableCell>\n                                </TableRow>}\n                            </>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    )\n}","import React from 'react';\nimport DriverStandings from './routes/DriverStandings';\nimport TopBar from './components/TopBar';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport ConstructorStandings from './routes/ConstructorStandings';\nimport Races from './routes/Races';\nimport { AppProvider } from './context/AppContext';\nimport RaceResults from './routes/RaceResults';\nimport FastestLaps from './routes/FastestLaps';\n\nfunction App() {\n    return (\n        <AppProvider>\n            <HashRouter basename='/'>\n                <div className=\"antialiased text-gray-900 bg-gray-100 h-screen\">\n                    <TopBar className=\"fixed top-0\" />\n                    <div className=\"mt-12 py-4 sm:px-4\">\n                        <Switch>\n                            <Route exact path='/' component={DriverStandings} />\n                            <Route exact path='/results' component={DriverStandings} />\n                            <Route path='/results/drivers' component={DriverStandings} />\n                            <Route path='/results/constructors' component={ConstructorStandings} />\n                            <Route exact path='/results/races' component={Races} />\n                            <Route path='/results/races/:slug' component={RaceResults} />\n                            <Route exact path='/results/fastestlap' component={FastestLaps} />\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        </AppProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}